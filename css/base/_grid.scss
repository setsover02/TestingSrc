// Layout variable
@mixin grid-base-property {
  position: relative;
  width: 100%;
  padding-left: $grid-gutter/2;
  padding-right: $grid-gutter/2;
}

.container {
  box-sizing: border-box;
  max-width: ($grid-gutter + $grid-column-width) * $grid-columns;
  margin: 0 auto;
  @include grid-base-property;
  @include clearfix;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$grid-gutter/2;
  margin-right: -$grid-gutter/2;
  @include clearfix;
  // display: block;
  background: color(teal);

}
@for $i from 1 through $grid-columns {
  .col#{-$i} {
    max-width: $grid-column-width-percentage * $i;
    flex: 0 0 $grid-column-width-percentage * $i;
    float: left;
    @include grid-base-property;
    @include clearfix;
  }
  @each $infix, $value in $breakpoints {
    @media screen and (min-width: $value) {
      .col#{-$infix}#{-$i} {
        max-width: $grid-column-width-percentage * $i;
        flex: 0 0 $grid-column-width-percentage * $i;
        float: left;
        @include grid-base-property;
        @include clearfix;
      }

      .col#{-$infix}-offset#{-$i} {
        margin-left: $grid-column-width-percentage * $i;
      }

      .col#{-$infix}-push#{-$i} {
        left: $grid-column-width-percentage * $i;
      }
    }
  }
}

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Please make sure it is defined in `$breakpoints` map.";
  }
}
